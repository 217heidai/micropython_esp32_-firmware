name: MicroPython For ESP32-S3-N16

on:
  workflow_dispatch:

env:
  MICROPYTHON: micropython
  MICROPYTHON_REPO: https://github.com/micropython/micropython.git
  MICROPYTHON_VERSION: v1.24.0
  ESPIDF: esp-idf
  ESPIDF_REPO: https://github.com/espressif/esp-idf.git
  ESPIDF_VERSION: v5.2.2
  TZ: Asia/Shanghai

jobs:
  MicroPython_ESP32-S3-N16:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential libffi-dev git pkg-config
          sudo apt-get install -y git wget flex bison gperf python3 python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0 python-is-python3 pip
          sudo timedatectl set-timezone "$TZ"

      - name: Clone ESP-IDF
        run: |
          git clone -b $ESPIDF_VERSION --recursive $ESPIDF_REPO $ESPIDF
          cd $ESPIDF
          git checkout $ESPIDF_VERSION
          git submodule update --init --recursive
          ./install.sh
          source export.sh

      - name: Clone MicroPython
        run: |
          git clone -b $MICROPYTHON_VERSION --recursive $MICROPYTHON_REPO $MICROPYTHON
          cd $MICROPYTHON
          git checkout $MICROPYTHON_VERSION
          git submodule update --init --recursive

      - name: Custom MicroPython for ESP32
        run: |
          wget -P $MICROPYTHON/ports/esp32/modules https://raw.githubusercontent.com/Josverl/micropython-stubs/main/mip/typing.py
          wget -P $MICROPYTHON/ports/esp32/modules https://raw.githubusercontent.com/micropython/micropython-lib/master/python-stdlib/logging/logging.py
          wget -P $MICROPYTHON/ports/esp32/modules https://raw.githubusercontent.com/micropython/micropython-lib/master/micropython/drivers/storage/sdcard/sdcard.py
          rm -rf $MICROPYTHON/ports/esp32/boards/ESP32_GENERIC_S3/sdkconfig.board
          mv Micropython/sdkconfig_ESP32-S3-N16.board $MICROPYTHON/ports/esp32/boards/ESP32_GENERIC_S3/sdkconfig.board

      - name: Compile the firmware
        id: compile
        run: |
          source $ESPIDF/export.sh
          cd $MICROPYTHON
          make -C mpy-cross
          cd ports/esp32
          make submodules
          make V=1 BOARD=ESP32_GENERIC_S3 BOARD_VARIANT=SPIRAM_OCT
          echo "status=success" >> $GITHUB_OUTPUT
          echo "COMPILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Organize compiled firmware
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: |
          cd $MICROPYTHON/ports/esp32/build-ESP32_GENERIC_S3-SPIRAM_OCT
          mv firmware.bin MicroPython-${{ env.MICROPYTHON_VERSION }}_ESP32-S3-N16_${{ env.COMPILE_DATE }}.bin

      - name: Upload firmware to release
        if: steps.compile.outputs.status == 'success' && !cancelled()
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.MICROPYTHON }}/ports/esp32/build-ESP32_GENERIC_S3-SPIRAM_OCT/MicroPython-${{ env.MICROPYTHON_VERSION }}_ESP32-S3-N16_${{ env.COMPILE_DATE }}.bin
          asset_name: MicroPython-${{ env.MICROPYTHON_VERSION }}_ESP32-S3-N16_${{ env.COMPILE_DATE }}.bin
          tag: MicroPython-${{ env.MICROPYTHON_VERSION }}
          body: |
            ### MicroPython Firmware For ESP32
            1. ESP32-NX:       ESP32、ESP32-WROOM、ESP32-WROVER、ESP32-SOLO、ESP32-PICO、ESP32-MINI with SPIRAM and xMib Flash  
            2. ESP32-S3-NX:    ESP32-S3、ESP32-S3-WROOM、ESP32-S3-MINI with Octal-SPIRAM and xMib Flash
          overwrite: true

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 4